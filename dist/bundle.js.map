{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://Kursovaya_4/./src/js/templateEngine.ts","webpack://Kursovaya_4/./src/js/game.ts"],"sourcesContent":["export function templateEngine(block: any) {\r\n    if (block === undefined || block === null || block === false) {\r\n        return document.createTextNode('');\r\n    }\r\n\r\n    if (typeof block === 'string' || typeof block === 'number' || block === true) {\r\n        return document.createTextNode(block);\r\n    }\r\n\r\n    if (Array.isArray(block)) {\r\n        const fragment = document.createDocumentFragment();\r\n        block.forEach((item) => {\r\n            const elem = templateEngine(item);\r\n            fragment.appendChild(elem);\r\n        });\r\n\r\n        return fragment;\r\n    }\r\n\r\n    const tag = document.createElement(block.tag);\r\n\r\n    if (block.cls) {\r\n        tag.classList.add(...[].concat(block.cls).filter(Boolean));\r\n    }\r\n\r\n    if (block.attrs) {\r\n        const keys = Object.keys(block.attrs);\r\n\r\n        keys.forEach((key) => {\r\n            tag.setAttribute(key, block.attrs[key]);\r\n        });\r\n    }\r\n\r\n    const content = templateEngine(block.content);\r\n\r\n    tag.appendChild(content);\r\n\r\n    return tag;\r\n}\r\n","// https://itchef.ru/articles/71769/\r\n// https://coderoad.ru/60044026/TypeScript-%D0%A1%D0%B2%D0%BE%D0%B9%D1%81%D1%82%D0%B2%D0%BE-X-%D0%BD%D0%B5-%D1%81%D1%83%D1%89%D0%B5%D1%81%D1%82%D0%B2%D1%83%D0%B5%D1%82-%D0%B2-Window-typeof-globalThis-%D0%BF%D1%80%D0%B5%D0%B4%D0%BB%D0%B0%D0%B3%D0%B0%D0%B5%D0%BC%D0%BE%D0%B5\r\n// https://bestprogrammer.ru/izuchenie/poshagovoe-rukovodstvo-po-typescript-dlya-nachinayushhih\r\n// https://www.typescriptlang.org/docs/handbook/dom-manipulation.html\r\n//\r\n\r\nimport '/style.scss';\r\nimport { templateEngine } from './templateEngine';\r\n// import {} from './utilits-functions';\r\nimport * as _ from 'lodash';\r\n\r\nwindow.game = {\r\n    DIFFICULT: '',\r\n    GAME_STATUS: 'CHOOSE_DIFFICULT',\r\n    DECK_CARDS: [\r\n        'spades_ace',\r\n        'spades_king',\r\n        'spades_queen',\r\n        'spades_jack',\r\n        'spades_ten',\r\n        'spades_nine',\r\n        'spades_eight',\r\n        'spades_seven',\r\n        'spades_six',\r\n        'diamonds_ace',\r\n        'diamonds_king',\r\n        'diamonds_queen',\r\n        'diamonds_jack',\r\n        'diamonds_ten',\r\n        'diamonds_nine',\r\n        'diamonds_eight',\r\n        'diamonds_seven',\r\n        'diamonds_six',\r\n        'clubs_ace',\r\n        'clubs_king',\r\n        'clubs_queen',\r\n        'clubs_jack',\r\n        'clubs_ten',\r\n        'clubs_nine',\r\n        'clubs_eight',\r\n        'clubs_seven',\r\n        'clubs_six',\r\n        'hearts_ace',\r\n        'hearts_king',\r\n        'hearts_queen',\r\n        'hearts_jack',\r\n        'hearts_ten',\r\n        'hearts_nine',\r\n        'hearts_eight',\r\n        'hearts_seven',\r\n        'hearts_six',\r\n    ],\r\n    RANDOM_CARDS: [],\r\n    TIMER: '',\r\n};\r\n\r\nconst screenDifficult = document.querySelector('.screen-difficult') as HTMLDivElement;\r\nconst blockDifficult = screenDifficult.querySelector('.difficult') as HTMLDivElement;\r\nconst fieldButtons = blockDifficult.querySelector('.difficult__field-buttons') as HTMLDivElement;\r\nconst buttonStart = blockDifficult.querySelector('.difficult__button-start') as HTMLButtonElement;\r\n\r\nconst screenPlay = document.querySelector('.screen-play') as HTMLDivElement;\r\n\r\nconst screenEndGame = document.querySelector('.screen-end-game_hidden') as HTMLDivElement;\r\n\r\nfieldButtons.addEventListener('click', (event) => {\r\n    const target = event.target as HTMLButtonElement;\r\n\r\n    window.game.DIFFICULT = target.dataset.level;\r\n\r\n    const buttonsLevel = fieldButtons.querySelectorAll('.difficult__button-level') as NodeListOf<HTMLButtonElement>;\r\n    for (const buttonLevel of Array.from(buttonsLevel)) {\r\n        buttonLevel.classList.remove('difficult__button-level_select');\r\n    }\r\n\r\n    target.classList.add('difficult__button-level_select');\r\n});\r\n\r\nbuttonStart.addEventListener('click', () => {\r\n    if (window.game.DIFFICULT || (!(window.game.DIFFICULT === '') && !(window.game.DIFFICULT === undefined))) {\r\n        screenDifficult.classList.add('screen-difficult_hidden');\r\n        screenPlay.classList.remove('screen-play_hidden');\r\n    }\r\n\r\n    const buttonsLevel = fieldButtons.querySelectorAll('.difficult__button-level') as NodeListOf<HTMLButtonElement>;\r\n    for (const buttonLevel of Array.from(buttonsLevel)) {\r\n        buttonLevel.classList.add('difficult__button-level_alert');\r\n        setTimeout(() => buttonLevel.classList.remove('difficult__button-level_alert'), 1500);\r\n    }\r\n\r\n    window.game.GAME_STATUS = 'PLAY';\r\n\r\n    renderGamePlay();\r\n});\r\n\r\nfunction renderGamePlay() {\r\n    const timerScale = screenPlay.querySelector('.header__timer-scale') as HTMLDivElement;\r\n    const blockCards = screenPlay.querySelector('.screen-play__block-cards') as HTMLDivElement;\r\n    const buttonStartAgain = screenPlay.querySelector('.header__button-start-again') as HTMLButtonElement;\r\n\r\n    blockCards.innerHTML = '';\r\n    timerScale.textContent = '00.00';\r\n    window.game.RANDOM_CARDS = [];\r\n    window.game.TIMER = '';\r\n\r\n    switch (window.game.DIFFICULT) {\r\n        case '3':\r\n            blockCards.style.width = 315 + 'px';\r\n            break;\r\n        case '6':\r\n            blockCards.style.width = 425 + 'px';\r\n            break;\r\n        case '9':\r\n            blockCards.style.width = 645 + 'px';\r\n            break;\r\n\r\n        default:\r\n            blockCards.style.width = 645 + 'px';\r\n\r\n            break;\r\n    }\r\n\r\n    function getRandomCard(arr: string[]): string {\r\n        let randomCard: number = Math.floor(Math.random() * arr.length);\r\n\r\n        return arr[randomCard];\r\n    }\r\n\r\n    function shuffleDeckCards(arr: string[]): string[] {\r\n        let shuffleArr: string[] = arr.concat(arr);\r\n\r\n        for (let i = shuffleArr.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            [shuffleArr[i], shuffleArr[j]] = [shuffleArr[j], shuffleArr[i]];\r\n        }\r\n\r\n        return shuffleArr;\r\n    }\r\n\r\n    function disableCard(card: HTMLDivElement): void {\r\n        card.style.pointerEvents = 'none';\r\n    }\r\n\r\n    function unDisableCard(card: HTMLDivElement): void {\r\n        card.style.pointerEvents = 'auto';\r\n    }\r\n\r\n    for (let i = 0; i < Number(window.game.DIFFICULT); i++) {\r\n        const randomCard: string = getRandomCard(window.game.DECK_CARDS);\r\n\r\n        if (!window.game.RANDOM_CARDS.includes(randomCard)) {\r\n            window.game.RANDOM_CARDS[i] = randomCard;\r\n        } else {\r\n            i = i - 1;\r\n        }\r\n        /**\r\n         * const suits = ['spades', 'hearts', 'clubs', 'diamonds'];\r\n         * const ranks = ['ace', 'king', 'queen', 'jack', 'ten', 'nine', 'eight', 'seven', 'six'];\r\n         * сделать две переменные с рандомом на каждый массив\r\n         * результат: название карты = сложить две переменные \"spades + '_' + ace\"\r\n         */\r\n    }\r\n\r\n    const fragmentBlockCards: DocumentFragment = document.createDocumentFragment();\r\n\r\n    const shuffleCards: string[] = shuffleDeckCards(window.game.RANDOM_CARDS);\r\n    shuffleCards.forEach((card) => {\r\n        fragmentBlockCards.appendChild(\r\n            templateEngine({\r\n                tag: 'div',\r\n                cls: ['card'],\r\n                attrs: {\r\n                    'data-card_name': card,\r\n                },\r\n            })\r\n        );\r\n    });\r\n\r\n    blockCards.appendChild(fragmentBlockCards);\r\n\r\n    function handleTimer(): void {\r\n        sec++;\r\n\r\n        if (sec >= 60) {\r\n            min++;\r\n            sec = 0;\r\n        }\r\n\r\n        // minutes = Number(minutes);\r\n        let minutes: string = min < 10 ? '0' + String(min) : String(min);\r\n        // seconds = Number(seconds);\r\n        let seconds: string = sec < 10 ? '0' + String(sec) : String(sec);\r\n\r\n        window.game.TIMER = `${minutes}.${seconds}`;\r\n\r\n        timerScale.innerText = window.game.TIMER;\r\n\r\n        if (window.game.GAME_STATUS !== 'PLAY') {\r\n            clearInterval(startTimer);\r\n        }\r\n    }\r\n\r\n    let sec: number = 0;\r\n    let min: number = 0;\r\n    let startTimer = setInterval(handleTimer, 1000);\r\n\r\n    const cards = blockCards.querySelectorAll('.card') as NodeListOf<HTMLDivElement>; //////////////////////////////\r\n\r\n    Array.from(cards).forEach((card) => {\r\n        card.style.backgroundImage = `url(./static/${card.dataset.card_name}.png`;\r\n        disableCard(card);\r\n    });\r\n    setTimeout(() => {\r\n        cards.forEach((card) => {\r\n            card.style.backgroundImage = `url(./static/card_back.png`;\r\n            unDisableCard(card);\r\n        });\r\n    }, 5000);\r\n\r\n    let hasSelectedCard: boolean = false;\r\n    let firstSelectCard: HTMLDivElement;\r\n    let secondSelectCard: HTMLDivElement;\r\n\r\n    function selectCard(this: HTMLDivElement): void {\r\n        this.style.backgroundImage = `url(./static/${this.dataset.card_name}.png`;\r\n\r\n        if (this === firstSelectCard) return;\r\n\r\n        if (!hasSelectedCard) {\r\n            hasSelectedCard = true;\r\n            firstSelectCard = this;\r\n            disableCard(firstSelectCard);\r\n            return;\r\n        }\r\n\r\n        secondSelectCard = this;\r\n        hasSelectedCard = false;\r\n\r\n        checkCard();\r\n    }\r\n\r\n    function checkCard(): void {\r\n        if (firstSelectCard.dataset.card_name === secondSelectCard.dataset.card_name) {\r\n            disableCard(secondSelectCard);\r\n            firstSelectCard.classList.add('card-face');\r\n            secondSelectCard.classList.add('card-face');\r\n\r\n            if (Array.from(cards).every((card) => card.classList.contains('card-face'))) {\r\n                window.game.GAME_STATUS = 'win';\r\n                renderScreenEndGame(window.game.GAME_STATUS, 'Вы выиграли!');\r\n                return;\r\n            } else {\r\n                // firstSelectCard = null;\r\n                // secondSelectCard = null;\r\n                return;\r\n            }\r\n        }\r\n\r\n        window.game.GAME_STATUS = 'lose';\r\n        renderScreenEndGame(window.game.GAME_STATUS, 'Вы проиграли!');\r\n    }\r\n\r\n    cards.forEach((card) => {\r\n        card.addEventListener('click', selectCard);\r\n    });\r\n\r\n    buttonStartAgain.addEventListener('click', () => {\r\n        clearInterval(startTimer);\r\n        renderGamePlay();\r\n    });\r\n}\r\n\r\nfunction renderScreenEndGame(status: string, message: string): void {\r\n    screenEndGame.innerHTML = '';\r\n    screenEndGame.appendChild(\r\n        templateEngine({\r\n            tag: 'div',\r\n            cls: ['end-game', 'block'],\r\n            content: [\r\n                {\r\n                    tag: 'div',\r\n                    cls: ['end-game__field-images'],\r\n                    content: [\r\n                        {\r\n                            tag: 'img',\r\n                            cls: ['end-game__image', 'block__image'],\r\n                            attrs: {\r\n                                src: `./static/${status}.png`,\r\n                                alt: status,\r\n                            },\r\n                        },\r\n                    ],\r\n                },\r\n                {\r\n                    tag: 'h2',\r\n                    cls: ['end-game__title', 'block__title'],\r\n                    content: message,\r\n                },\r\n                {\r\n                    tag: 'p',\r\n                    cls: ['end-game__text', 'block__text'],\r\n                    content: 'Затраченное время:',\r\n                },\r\n                {\r\n                    tag: 'p',\r\n                    cls: ['end-game__time', 'block__time'],\r\n                    content: window.game.TIMER,\r\n                },\r\n                {\r\n                    tag: 'button',\r\n                    cls: ['end-game__button-start-again', 'button-start'],\r\n                    content: 'Играть снова',\r\n                },\r\n            ],\r\n        })\r\n    );\r\n\r\n    const buttonStartAgain = document.querySelector('.end-game__button-start-again') as HTMLButtonElement;\r\n\r\n    buttonStartAgain.addEventListener('click', () => {\r\n        screenEndGame.classList.add('screen-end-game_hidden');\r\n        screenDifficult.classList.remove('screen-difficult_hidden');\r\n    });\r\n\r\n    screenPlay.classList.add('screen-play_hidden');\r\n    screenEndGame.classList.remove('screen-end-game_hidden');\r\n}\r\n"],"names":["templateEngine","block","document","createTextNode","Array","isArray","createDocumentFragment","forEach","item","elem","appendChild","tag","createElement","cls","classList","add","concat","filter","Boolean","attrs","Object","keys","key","setAttribute","content","window","game","DIFFICULT","GAME_STATUS","DECK_CARDS","RANDOM_CARDS","TIMER","screenDifficult","querySelector","blockDifficult","fieldButtons","buttonStart","screenPlay","screenEndGame","renderGamePlay","arr","timerScale","blockCards","buttonStartAgain","innerHTML","textContent","style","width","disableCard","card","pointerEvents","i","Number","randomCard","Math","floor","random","length","includes","fragmentBlockCards","shuffleCards","shuffleArr","j","shuffleDeckCards","sec","min","startTimer","setInterval","minutes","String","seconds","innerText","clearInterval","cards","querySelectorAll","from","backgroundImage","dataset","card_name","setTimeout","unDisableCard","firstSelectCard","secondSelectCard","hasSelectedCard","selectCard","this","every","contains","renderScreenEndGame","checkCard","addEventListener","status","message","src","alt","remove","event","target","level","buttonsLevel","undefined","buttonLevel"],"sourceRoot":""}